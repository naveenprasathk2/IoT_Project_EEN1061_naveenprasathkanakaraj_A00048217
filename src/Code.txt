#include <motion-detection_inferencing.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <DHT.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <math.h>

#define DHT_PIN               15
#define DHT_TYPE              DHT22
#define GAS_SENSOR_PIN        34
#define ALERT_LED_PIN         25
#define BUZZER_PIN            26 
#define RESET_BUTTON_PIN      0    

#define TEMPERATURE_THRESHOLD 40.0  
#define GAS_THRESHOLD         800.0 
#define CONFIDENCE_THRESHOLD  0.70  

const char* ssid = "Wokwi-GUEST";
const char* password = "";
const char* mqtt_server = "broker.hivemq.com";
const char* mqtt_topic = "SafetySystem/A00048217/safety_data";

DHT dht(DHT_PIN, DHT_TYPE);
Adafruit_MPU6050 mpu;
WiFiClient espClient;
PubSubClient client(espClient);

bool fall_alert_active = false;
bool temp_alert_active = false;
bool gas_alert_active = false;

unsigned long last_reading_time = 0;
unsigned long last_event_ms = 0;
const unsigned long SAFE_INTERVAL_MS  = 3000;
const unsigned long ALERT_INTERVAL_MS = 300;
const unsigned long COOL_DOWN_MS      = 15000;

String current_scenario = "UNSET";
unsigned long temp_onset_ms = 0, gas_onset_ms = 0, fall_gt_onset_ms = 0;
bool temp_gt_active = false, gas_gt_active = false, fall_gt_active = false;
static unsigned long last_tick_ms = 0;

const int N = 12;
float gas_hist[N]  = {0};
float temp_hist[N] = {0};
int   hist_ix      = 0;
bool  hist_ready   = false;
bool  gas_rising_fast_flag  = false;
bool  temp_rising_fast_flag = false;

bool trend_rising(const float *h, int n, float min_delta) {
  if (!hist_ready) return false;
  int last  = (hist_ix - 1 + n) % n;
  int first = hist_ix;
  float delta = h[last] - h[first];
  return delta >= min_delta;
}

bool fallback_fall(const sensors_event_t& acc) {
  float ax = acc.acceleration.x, ay = acc.acceleration.y, az = acc.acceleration.z;
  float mag = sqrtf(ax*ax + ay*ay + az*az);
  static uint32_t last_spike = 0;
  bool spike = (mag > 18.0f);
  if (spike) last_spike = millis();
  bool near_freefall = (mag < 3.0f);
  return spike || (near_freefall && (millis() - last_spike < 800));
}

void setup_wifi() {
  delay(10);
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void reconnect_mqtt() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    String clientId = "ESP32_SafetySystem_A00048217-" + String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("connected to HiveMQ\n");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds\n");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  Wire.begin();
  dht.begin();
  pinMode(ALERT_LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT); 
  pinMode(RESET_BUTTON_PIN, INPUT_PULLUP);
  pinMode(GAS_SENSOR_PIN, INPUT);

  while (!mpu.begin()) {
    Serial.println("MPU6050 not found! Retrying...");
    delay(1000);
  }
  digitalWrite(ALERT_LED_PIN, LOW);

  setup_wifi();
  client.setServer(mqtt_server, 1883);

  Serial.println("\n================================================");
  Serial.println("    SMART WEARABLE SAFETY SYSTEM ");
  Serial.println("================================================");
  Serial.println("Features:");
  Serial.println("Real time Hazard Detection ");
  Serial.println("- Accidental Falls ");
  Serial.println("- Environmental Temperature");
  Serial.println("- Gas Level in surroundings");
  Serial.println("================================================\n");
  Serial.println("ts_ms,scenario,tempC,hum,gas_ppm,ax,ay,az,pred,conf,fall_alert,temp_alert,gas_alert,status,mqtt_ok,lat_temp_ms,lat_gas_ms,lat_fall_ms,loop_interval_ms");
}

void loop() {
  if (WiFi.status() == WL_CONNECTED && !client.connected()) {
    reconnect_mqtt();
  }
  client.loop();

  if (Serial.available()) {
    String cmd = Serial.readStringUntil('\n');
    cmd.trim();
    if (cmd.startsWith("SCN:")) {
      current_scenario = cmd.substring(4);
      Serial.println(String("[SCENARIO] -> ") + current_scenario);
    } else if (cmd == "GT:TEMP:ON")  { temp_gt_active = true;  temp_onset_ms = millis(); }
    else if (cmd == "GT:TEMP:OFF")   { temp_gt_active = false; }
    else if (cmd == "GT:GAS:ON")     { gas_gt_active  = true;  gas_onset_ms  = millis(); }
    else if (cmd == "GT:GAS:OFF")    { gas_gt_active  = false; }
    else if (cmd == "GT:FALL:ON")    { fall_gt_active = true;  fall_gt_onset_ms = millis(); }
    else if (cmd == "GT:FALL:OFF")   { fall_gt_active = false; }
  }

  if (digitalRead(RESET_BUTTON_PIN) == LOW) {
    Serial.println("\n*** MANUAL RESET ACTIVATED ***");
    fall_alert_active = false;
    temp_alert_active = false;
    gas_alert_active = false;
    digitalWrite(ALERT_LED_PIN, LOW);
    noTone(BUZZER_PIN);
    Serial.println("All alerts cleared.\n");

    char resetPayload[200];
    snprintf(resetPayload, sizeof(resetPayload),
            "{\"studentID\":\"A00048217\",\"status\":\"SYSTEM_RESET\",\"message\":\"Manual reset activated\",\"timestamp\":%lu}",
            millis());
    client.publish(mqtt_topic, resetPayload);
    delay(1000);
  }

  bool hazard_prev = fall_alert_active || temp_alert_active || gas_alert_active;
  if (hazard_prev) last_event_ms = millis();
  unsigned long target_interval = (millis() - last_event_ms > COOL_DOWN_MS) ? SAFE_INTERVAL_MS : ALERT_INTERVAL_MS;
  if (millis() - last_reading_time < target_interval) return;
  last_reading_time = millis();

  sensors_event_t a, g, temp_event;
  mpu.getEvent(&a, &g, &temp_event);
  float temperature_c = dht.readTemperature();
  float humidity = dht.readHumidity();
  int gas_raw = analogRead(GAS_SENSOR_PIN);
  float gas_ppm = map(gas_raw, 0, 4095, 0, 1023);

  bool dht_ok = (!isnan(temperature_c) && !isnan(humidity));
  bool mpu_ok = (!isnan(a.acceleration.x) && !isnan(a.acceleration.y) && !isnan(a.acceleration.z));
  if (!dht_ok || !mpu_ok) {
    Serial.println("<<WARNING: Sensor read invalid>>");
  }

  gas_hist[hist_ix]  = gas_ppm;
  temp_hist[hist_ix] = temperature_c;
  hist_ix = (hist_ix + 1) % N;
  if (!hist_ready && hist_ix == 0) hist_ready = true;
  gas_rising_fast_flag  = trend_rising(gas_hist,  N, 120.0f);
  temp_rising_fast_flag = trend_rising(temp_hist, N, 1.0f);

  float accel_features[] = {a.acceleration.x, a.acceleration.y, a.acceleration.z};
  signal_t accel_signal;
  accel_signal.total_length = 3;
  accel_signal.get_data = [accel_features](size_t offset, size_t length, float *out_ptr) -> int {
    out_ptr[0] = accel_features[offset];
    return 0;
  };

  ei_impulse_result_t accel_result = {0};
  EI_IMPULSE_ERROR res = run_classifier(&accel_signal, &accel_result, false);

  const char* motion_prediction = "unknown";
  float motion_confidence = 0.0f;
  if (res == EI_IMPULSE_OK) {
    for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
      if (accel_result.classification[ix].value > motion_confidence) {
        motion_confidence = accel_result.classification[ix].value;
        motion_prediction = accel_result.classification[ix].label;
      }
    }
  }

  bool confident_fall = (strcmp(motion_prediction, "1") == 0 || strcmp(motion_prediction, "fall") == 0) &&
                        (motion_confidence >= CONFIDENCE_THRESHOLD);

  bool current_temp_hazard = (temperature_c > TEMPERATURE_THRESHOLD);
  bool current_gas_hazard = (gas_ppm > GAS_THRESHOLD);

  temp_alert_active = current_temp_hazard;
  gas_alert_active = current_gas_hazard;

  bool fb_fall = fallback_fall(a);
  fall_alert_active = confident_fall || fb_fall;

  String alert_status = "OK";
  if (fall_alert_active) {
    if (current_temp_hazard && current_gas_hazard) alert_status = "FALL_TEMP_GAS";
    else if (current_temp_hazard) alert_status = "FALL_TEMP";
    else if (current_gas_hazard) alert_status = "FALL_GAS";
    else alert_status = "FALL_DETECTED";
  } else if (current_temp_hazard && current_gas_hazard) alert_status = "HIGH_TEMP_GAS";
  else if (current_temp_hazard) alert_status = "HIGH_TEMP";
  else if (current_gas_hazard) alert_status = "HIGH_GAS";

  bool any_alert_active = (alert_status != "OK");
  if (any_alert_active) last_event_ms = millis();

  char json_payload[512];
  snprintf(json_payload, sizeof(json_payload),
          "{\"studentID\":\"A00048217\",\"status\":\"%s\",\"temperature\":%.2f,\"humidity\":%.2f,"
          "\"accel_x\":%.2f,\"accel_y\":%.2f,\"accel_z\":%.2f,\"gas_raw\":%d,\"gas_ppm\":%.2f,"
          "\"motion_prediction\":\"%s\",\"motion_confidence\":%.2f,\"fall_alert\":%s,"
          "\"temp_alert\":%s,\"gas_alert\":%s,\"uptime\":%lu}",
          alert_status.c_str(), temperature_c, humidity, a.acceleration.x, a.acceleration.y, a.acceleration.z,
          gas_raw, gas_ppm, motion_prediction, motion_confidence,
          fall_alert_active ? "true" : "false",
          temp_alert_active ? "true" : "false",
          gas_alert_active ? "true" : "false",
          millis());
  bool mqtt_ok = client.publish(mqtt_topic, json_payload);

  unsigned long now_ms = millis();
  unsigned long loop_interval_ms = (last_tick_ms == 0) ? 0 : (now_ms - last_tick_ms);
  last_tick_ms = now_ms;

  long lat_temp = (temp_gt_active && temp_alert_active) ? (long)(now_ms - temp_onset_ms) : -1;
  long lat_gas  = (gas_gt_active  && gas_alert_active)  ? (long)(now_ms - gas_onset_ms)  : -1;
  long lat_fall = (fall_gt_active && fall_alert_active) ? (long)(now_ms - fall_gt_onset_ms) : -1;

  Serial.print(now_ms); Serial.print(",");
  Serial.print(current_scenario); Serial.print(",");
  Serial.print(temperature_c,2); Serial.print(",");
  Serial.print(humidity,2); Serial.print(",");
  Serial.print(gas_ppm,0); Serial.print(",");
  Serial.print(a.acceleration.x,2); Serial.print(",");
  Serial.print(a.acceleration.y,2); Serial.print(",");
  Serial.print(a.acceleration.z,2); Serial.print(",");
  Serial.print(motion_prediction); Serial.print(",");
  Serial.print(motion_confidence,2); Serial.print(",");
  Serial.print(fall_alert_active ? 1 : 0); Serial.print(",");
  Serial.print(temp_alert_active ? 1 : 0); Serial.print(",");
  Serial.print(gas_alert_active ? 1 : 0); Serial.print(",");
  Serial.print(alert_status); Serial.print(",");
  Serial.print(mqtt_ok ? 1 : 0); Serial.print(",");
  Serial.print(lat_temp); Serial.print(",");
  Serial.print(lat_gas);  Serial.print(",");
  Serial.print(lat_fall); Serial.print(",");
  Serial.println(loop_interval_ms);

  Serial.println("\n----------------------------------------");
  Serial.println("SYSTEM STATUS");
  Serial.println("----------------------------------------");

  Serial.print("Temperature: \t");
  Serial.print(temperature_c, 2);
  Serial.print(" °C\tStatus: ");
  Serial.println(current_temp_hazard ? "HIGH" : "Normal");

  Serial.print("Humidity: \t");
  Serial.print(humidity, 2);
  Serial.println(" %");

  Serial.print("Gas Level: \t");
  Serial.print(gas_ppm, 0);
  Serial.print(" ppm\t\tStatus: ");
  Serial.println(current_gas_hazard ? "HIGH" : "Normal");
  
  Serial.print("Accel X: \t");
  Serial.print(a.acceleration.x, 2);
  Serial.println(" m/s^2");
  
  Serial.print("Accel Y: \t");
  Serial.print(a.acceleration.y, 2);
  Serial.println(" m/s^2");

  Serial.print("Accel Z: \t");
  Serial.print(a.acceleration.z, 2);
  Serial.println(" m/s^2");

  Serial.print("Motion: \t");
  Serial.print(motion_prediction);
  Serial.print("\t\tConfidence: ");
  Serial.println(motion_confidence, 2);

  Serial.print("MQTT Status: \t");
  Serial.print(client.connected() ? "Connected" : "Offline");
  Serial.print("\tWiFi: ");
  Serial.println(WiFi.status() == WL_CONNECTED ? "Connected" : "Offline");
  
  Serial.println("\n----------------------------------------");
  Serial.println("ALERT STATUS");
  Serial.println("----------------------------------------");
  
  if (fall_alert_active) {
    Serial.println("<<CRITICAL: FALL DETECTED>>");
    if (current_temp_hazard && current_gas_hazard) {
      Serial.println("    -> Probable Cause: High Temperature and Gas Exposure");
    } else if (current_temp_hazard) {
      Serial.println("    -> Probable Cause: Heat-related incident");
    } else if (current_gas_hazard) {
      Serial.println("    -> Probable Cause: Gas exposure");
    } else {
      Serial.println("    -> Environmental factors appear normal");
    }
  } else if (current_temp_hazard) {
    Serial.println("<<WARNING: High Temperature Detected>>");
  } else if (current_gas_hazard) {
    Serial.println("<<WARNING: Hazardous Gas Detected>>");
  } else {
    Serial.println("All systems normal.");
  }

  if (!gas_alert_active && gas_rising_fast_flag) {
    Serial.println("<<PRE-WARN: Gas rising fast>>");
  }
  if (!temp_alert_active && temp_rising_fast_flag) {
    Serial.println("<<PRE-WARN: Temp rising fast>>");
  }

  Serial.println("========================================\n");

  if (any_alert_active) {
    digitalWrite(ALERT_LED_PIN, HIGH);
    tone(BUZZER_PIN, 1000, 200);
  } else {
    digitalWrite(ALERT_LED_PIN, LOW);
    noTone(BUZZER_PIN);
  }

  if (fall_alert_active) {
    Serial.println("\nEMERGENCY RESPONSE REQUIRED:");
    Serial.println("   1. Check worker consciousness");
    Serial.println("   2. Call emergency services if needed");
    Serial.println("   3. Press BOOT button to reset alerts");
    Serial.println("   4. Check MQTT dashboard for remote monitoring");
  }

  Serial.println("\n" + String('=', 50) + "\n");
}
